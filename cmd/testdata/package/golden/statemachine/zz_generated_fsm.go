// The code is generated by VectorSigma. DO NOT EDIT.
package statemachine

const (
	FinalState     StateName = "FinalState"
	FlashingYellow StateName = "FlashingYellow"
	Green          StateName = "Green"
	Red            StateName = "Red"
	Yellow         StateName = "Yellow"

	SwitchIn ActionName = "SwitchIn"

	IsError GuardName = "IsError"
)

var (
	AllGuards  = Guards{}
	AllActions = Actions{}
)

type (
	StateName  string
	ActionName string
	GuardName  string
	Guards     map[GuardName]Guard
	Actions    map[ActionName]Action
	States     map[StateName]State
)

type GuardedTransistion struct {
	Name   GuardName
	Target StateName
}

type StateAction struct {
	Name       ActionName
	Parameters []string
}

type State struct {
	Actions []StateAction
	Guards  []GuardedTransistion
}

type Action interface {
	Execute(ctx *Context, state *ExtendedState, parameters ...string) error
}

type Guard interface {
	Evaluate(state *ExtendedState) bool
}

type StateMachine struct {
	States       States
	InitialState StateName
}

type Runner struct {
	Context *Context
	State   *ExtendedState
	Current StateName
	Actions Actions
	Guards  Guards
	StateMachine
}

func (r *Runner) Run() {
	r.Current = r.InitialState

	for {
		r.Context.Log.Info("Current state", "state", r.Current)

		s, ok := r.States[r.Current]
		if !ok {
			panic("invalid state")
		}

		for _, ac := range s.Actions {
			err := r.Actions[ac.Name].Execute(r.Context, r.State, ac.Parameters...)
			if err != nil {
				r.State.Error = err.Error()
			}
		}

		var nextState StateName

		for _, gu := range s.Guards {
			if gu.Name == "" || r.Guards[gu.Name].Evaluate(r.State) {
				nextState = gu.Target

				break
			}
		}

		if nextState == FinalState {
			if r.State.Error != "" {
				r.Context.Log.Error(r.State.Error, "state", r.Current)
			}

			break
		}

		r.Current = nextState
	}
}

func New() *StateMachine {
	return &StateMachine{
		InitialState: Red,
		States: States{
			FinalState: {
				Guards: []GuardedTransistion{},
			},
			FlashingYellow: {
				Actions: []StateAction{
					{
						Name:       SwitchIn,
						Parameters: []string{"3"},
					},
				},
				Guards: []GuardedTransistion{
					{Name: IsError, Target: FinalState},
					{Name: "", Target: Red},
				},
			},
			Green: {
				Actions: []StateAction{
					{
						Name:       SwitchIn,
						Parameters: []string{"5"},
					},
				},
				Guards: []GuardedTransistion{
					{Name: IsError, Target: FinalState},
					{Name: "", Target: FlashingYellow},
				},
			},
			Red: {
				Actions: []StateAction{
					{
						Name:       SwitchIn,
						Parameters: []string{"5"},
					},
				},
				Guards: []GuardedTransistion{
					{Name: IsError, Target: FinalState},
					{Name: "", Target: Yellow},
				},
			},
			Yellow: {
				Actions: []StateAction{
					{
						Name:       SwitchIn,
						Parameters: []string{"1"},
					},
				},
				Guards: []GuardedTransistion{
					{Name: IsError, Target: FinalState},
					{Name: "", Target: Green},
				},
			},
		},
	}
}
