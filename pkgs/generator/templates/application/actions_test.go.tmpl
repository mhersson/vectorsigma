package {{ .Package }}_test

import (
	"testing"

{{- if .Init }}
	"{{ .Module }}/internal/{{ .Package }}"
{{- else }}
	"{{ .Module }}/{{ .Package }}"
{{- end }}
)

{{- range $name := .FSM.ActionNames }}
func Test{{ $.FSM.Title }}_{{ $name }}Action(t *testing.T) {
	type fields struct {
        context       *{{ $.Package }}.Context
		currentState  {{ $.Package }}.StateName
		stateConfigs  map[{{ $.Package }}.StateName]{{ $.Package }}.StateConfig
		ExtendedState *{{ $.Package }}.ExtendedState
	}

	type args struct {
		params []string
	}

	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		// TODO: Add test cases.
	}

	t.Parallel()
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			fsm := &{{ $.Package }}.{{ $.FSM.Title }}{
                Context:       tt.fields.context,
				CurrentState:  tt.fields.currentState,
				StateConfigs:  tt.fields.stateConfigs,
				ExtendedState: tt.fields.ExtendedState,
			}
			if err := fsm.{{ $name }}Action(tt.args.params...); (err != nil) != tt.wantErr {
				t.Errorf("{{ $.FSM.Title }}.{{ $name }}Action() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

{{ end }}
