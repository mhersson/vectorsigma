// This file is generated by VectorSigma {{ .Version }}. DO NOT EDIT.
package {{ .Package }}_test

import (
	"reflect"
	"testing"

	"context"
	"fmt"
	"{{ .Module }}/{{ .RelativePath }}/{{ .Package }}"
	"os"
	"path/filepath"
	ctrl "sigs.k8s.io/controller-runtime"

	"k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/envtest"

	{{ .Group }}{{ .APIVersion}} "{{ .Module }}/api/{{ .APIVersion }}"
)

var (
	ctx         context.Context
	cancel      context.CancelFunc
	testEnv     *envtest.Environment
	cfg         *rest.Config
	k8sClient   client.Client
	projectroot = filepath.Join("..", "..", "..")
)

var resourceName = types.NamespacedName{
	Namespace: "default",
	Name:      "test-resource",
}

func Test{{ .FSM.Title }}_Run(t *testing.T) {
	type fields struct {
		Context       *{{ .Package }}.Context
		CurrentState  {{ .Package }}.StateName
		ExtendedState *{{ .Package }}.ExtendedState
		StateConfigs  map[{{ .Package }}.StateName]{{ .Package }}.StateConfig
	}
	tests := []struct {
		name    string
		want    ctrl.Result
		wantErr bool
	}{
		{name: "Happy path", want: ctrl.Result{}, wantErr: false},
	}
	for _, tt := range tests {
		setup(t)
		teardown(t)
		t.Run(tt.name, func(t *testing.T) {
			fsm := {{ .Package }}.New()
			fsm.Context.Client = k8sClient
			fsm.ExtendedState.ResourceName = resourceName
			got, err := fsm.Run()
			if (err != nil) != tt.wantErr {
				t.Errorf("{{ .FSM.Title }}.Run() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("{{ .FSM.Title }}.Run() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMain(m *testing.M) {
	if err := setupTestEnv(); err != nil {
		fmt.Printf("Test environment setup failed: %v\n", err)
		os.Exit(1)
	}

	exitCode := m.Run()

	if err := teardownTestEnv(); err != nil {
		fmt.Printf("Tear down test environment failed: %v\n", err)
		os.Exit(1)
	}

	os.Exit(exitCode)
}

func setupTestEnv() error {
	ctx, cancel = context.WithCancel(context.TODO())

	var err error
	// TODO(user): Add your API to the runtime scheme
	err = {{ .Group }}{{ .APIVersion}}.AddToScheme(scheme.Scheme)
	if err != nil {
		return fmt.Errorf("failed to add schema: %v\n", err)
	}

	// +kubebuilder:scaffold:scheme

	testEnv = &envtest.Environment{
		CRDDirectoryPaths:     []string{filepath.Join(projectroot, "config", "crd", "bases")},
		ErrorIfCRDPathMissing: true,
	}

	// Retrieve the first found binary directory to allow running tests from IDEs
	if getFirstFoundEnvTestBinaryDir() != "" {
		testEnv.BinaryAssetsDirectory = getFirstFoundEnvTestBinaryDir()
	}

	// cfg is defined in this file globally.
	cfg, err = testEnv.Start()
	if err != nil {
		return fmt.Errorf("failed to start testenv: %v\n", err)
	}

	k8sClient, err = client.New(cfg, client.Options{Scheme: scheme.Scheme})
	if err != nil {
		return fmt.Errorf("failed to create test client: %v\n", err)
	}

	return nil
}

func teardownTestEnv() error {
	cancel()
	err := testEnv.Stop()
	if err != nil {
		return fmt.Errorf("failed to stop testenv: %v\n", err)
	}

	return nil
}

// getFirstFoundEnvTestBinaryDir locates the first binary in the specified path.
// ENVTEST-based tests depend on specific binaries, usually located in paths set by
// controller-runtime. When running tests directly (e.g., via an IDE) without using
// Makefile targets, the 'BinaryAssetsDirectory' must be explicitly configured.
//
// This function streamlines the process by finding the required binaries, similar to
// setting the 'KUBEBUILDER_ASSETS' environment variable. To ensure the binaries are
// properly set up, run 'make setup-envtest' beforehand.
func getFirstFoundEnvTestBinaryDir() string {
	basePath := filepath.Join(projectroot, "bin", "k8s")
	entries, err := os.ReadDir(basePath)
	if err != nil {
		fmt.Printf("failed to read directory: %v", err)
		return ""
	}
	for _, entry := range entries {
		if entry.IsDir() {
			return filepath.Join(basePath, entry.Name())
		}
	}
	return ""
}
