package {{ .Package }}_test

import (
    "context"
	"testing"

	{{- if eq .RelativePath "" }}
	"{{ .Module }}/{{ .Package }}"
	{{- else }}
	"{{ .Module }}/{{ .RelativePath }}/{{ .Package }}"
	{{- end }}
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes/scheme"
	"sigs.k8s.io/controller-runtime/pkg/client/fake"

	{{ .Group }}{{ .APIVersion}} "{{ .Module }}/api/{{ .APIVersion }}"
)

const kind = "{{ .APIKind }}"

// resourceName is used by both unit and integration tests
var resourceName = types.NamespacedName{
	Namespace: "default",
	Name:      "test-resource",
}

// fakeK8sClient is a shared variable that can be used by tests
// Unit tests create their own fake clients per test
// Integration tests will use the envtest k8sClient
var fakeK8sClient client.Client

// silentLogger creates a logger that discards all output
func silentLogger() logr.Logger {
	return logr.Discard()
}

// testContext returns a fully configured test context
func testContext() *{{ .Package }}.Context {
	// Create a new scheme and register all types we might need in tests
	testScheme := scheme.Scheme
	_ = {{ .Group }}{{ .APIVersion}}.AddToScheme(testScheme)

	// Create a fake client with the comprehensive scheme and status subresource support
	fakeClient := fake.NewClientBuilder().
		WithScheme(testScheme).
		WithStatusSubresource(&{{ .Group }}{{ .APIVersion}}.{{ .APIKind }}{}).
		Build()

	return &{{ .Package }}.Context{
		Logger: silentLogger(),
		Client: fakeClient,
		Ctx:    context.TODO(),
	}
}

{{- range $name := .FSM.ActionNames }}
// +vectorsigma:action:{{ $name }}
func Test{{ $.FSM.Title }}_{{ $name }}Action(t *testing.T) {
	type fields struct {
        context       *{{ $.Package }}.Context
		currentState  {{ $.Package }}.StateName
		stateConfigs  map[{{ $.Package }}.StateName]{{ $.Package }}.StateConfig
		ExtendedState *{{ $.Package }}.ExtendedState
	}

	type args struct {
		params []string
	}

	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		// TODO: Add test cases.
	}

	t.Parallel()
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			fsm := &{{ $.Package }}.{{ $.FSM.Title }}{
                Context:       tt.fields.context,
				CurrentState:  tt.fields.currentState,
				StateConfigs:  tt.fields.stateConfigs,
				ExtendedState: tt.fields.ExtendedState,
			}
			if err := fsm.{{ $name }}Action(tt.args.params...); (err != nil) != tt.wantErr {
				t.Errorf("{{ $.FSM.Title }}.{{ $name }}Action() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

{{ end }}
