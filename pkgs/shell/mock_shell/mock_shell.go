// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mhersson/vectorsigma/pkgs/shell (interfaces: CmdRunner,Interface)
//
// Generated by this command:
//
//	mockgen -package mock_shell -destination=mock_shell/mock_shell.go . CmdRunner,Interface
//

// Package mock_shell is a generated GoMock package.
package mock_shell

import (
	reflect "reflect"

	shell "github.com/mhersson/vectorsigma/pkgs/shell"
	gomock "go.uber.org/mock/gomock"
)

// MockCmdRunner is a mock of CmdRunner interface.
type MockCmdRunner struct {
	ctrl     *gomock.Controller
	recorder *MockCmdRunnerMockRecorder
}

// MockCmdRunnerMockRecorder is the mock recorder for MockCmdRunner.
type MockCmdRunnerMockRecorder struct {
	mock *MockCmdRunner
}

// NewMockCmdRunner creates a new mock instance.
func NewMockCmdRunner(ctrl *gomock.Controller) *MockCmdRunner {
	mock := &MockCmdRunner{ctrl: ctrl}
	mock.recorder = &MockCmdRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdRunner) EXPECT() *MockCmdRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockCmdRunner) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCmdRunnerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCmdRunner)(nil).Run))
}

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// NewCommand mocks base method.
func (m *MockInterface) NewCommand(arg0 string, arg1 ...string) shell.CmdRunner {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewCommand", varargs...)
	ret0, _ := ret[0].(shell.CmdRunner)
	return ret0
}

// NewCommand indicates an expected call of NewCommand.
func (mr *MockInterfaceMockRecorder) NewCommand(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommand", reflect.TypeOf((*MockInterface)(nil).NewCommand), varargs...)
}
