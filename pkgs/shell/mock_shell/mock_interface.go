// Code generated by mockery v2.52.1. DO NOT EDIT.

package mock_shell

import (
	shell "github.com/mhersson/vectorsigma/pkgs/shell"
	mock "github.com/stretchr/testify/mock"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// NewCommand provides a mock function with given fields: name, args
func (_m *MockInterface) NewCommand(name string, args ...string) shell.CmdRunner {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NewCommand")
	}

	var r0 shell.CmdRunner
	if rf, ok := ret.Get(0).(func(string, ...string) shell.CmdRunner); ok {
		r0 = rf(name, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shell.CmdRunner)
		}
	}

	return r0
}

// MockInterface_NewCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewCommand'
type MockInterface_NewCommand_Call struct {
	*mock.Call
}

// NewCommand is a helper method to define mock.On call
//   - name string
//   - args ...string
func (_e *MockInterface_Expecter) NewCommand(name interface{}, args ...interface{}) *MockInterface_NewCommand_Call {
	return &MockInterface_NewCommand_Call{Call: _e.mock.On("NewCommand",
		append([]interface{}{name}, args...)...)}
}

func (_c *MockInterface_NewCommand_Call) Run(run func(name string, args ...string)) *MockInterface_NewCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockInterface_NewCommand_Call) Return(_a0 shell.CmdRunner) *MockInterface_NewCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_NewCommand_Call) RunAndReturn(run func(string, ...string) shell.CmdRunner) *MockInterface_NewCommand_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
